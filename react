import React, { useState } from 'react';

function CategoryItem({ category, onUpdateCategory, onAddSubcategory }) {
    const [isOpen, setIsOpen] = useState(true);
    const [tempName, setTempName] = useState(category.name);

    const handleSave = () => {
        if (tempName.trim() !== "") {
            const updatedCategory = { ...category, name: tempName, isEditing: false };
            onUpdateCategory(updatedCategory);
        }
    };

    return (
        <div style={{ marginLeft: '20px' }}>
            {category.isEditing ? (
                <div>
                    <input
                        value={tempName}
                        onChange={e => setTempName(e.target.value)}
                        onBlur={handleSave}
                    />
                    <button onClick={handleSave}>Salvar</button>
                </div>
            ) : (
                <div>
                    <button onClick={() => setIsOpen(!isOpen)}>{isOpen ? '-' : '+'}</button>
                    {category.name}
                    <button onClick={onAddSubcategory}>+ Subcategoria</button>
                </div>
            )}

            {isOpen && category.subcategories.map((subcat, index) => (
                <CategoryItem
                    key={index}
                    category={subcat}
                    onAddSubcategory={() => onAddSubcategory(index)}
                    onUpdateCategory={(updatedSubcategory) => {
                        const newSubcategories = [...category.subcategories];
                        newSubcategories[index] = updatedSubcategory;
                        const updatedCategory = { ...category, subcategories: newSubcategories };
                        onUpdateCategory(updatedCategory);
                    }}
                />
            ))}
        </div>
    );
}

function App() {
    const [categories, setCategories] = useState([]);
    const [newCategory, setNewCategory] = useState('');

    const addCategory = () => {
        if (newCategory.trim()) {
            setCategories([...categories, { name: newCategory, subcategories: [], isEditing: false }]);
            setNewCategory('');
        }
    };

    const updateCategory = (index, updatedCategory) => {
        const newCategories = [...categories];
        newCategories[index] = updatedCategory;
        setCategories(newCategories);
    };

    const addSubcategory = (path) => {
        const newCategories = [...categories];
        let currentLevel = newCategories;

        for (let i = 0; i < path.length; i++) {
            currentLevel = currentLevel[path[i]].subcategories;
        }

        currentLevel.push({ name: '', isEditing: true, subcategories: [] });
        setCategories(newCategories);
    };

    return (
        <div>
            <div>
                <input
                    value={newCategory}
                    onChange={e => setNewCategory(e.target.value)}
                    placeholder="Nome da categoria"
                />
                <button onClick={addCategory}>Criar Categoria</button>
            </div>

            {categories.map((cat, index) => (
                <CategoryItem
                    key={index}
                    category={cat}
                    onAddSubcategory={() => addSubcategory([index])}
                    onUpdateCategory={(updatedCategory) => updateCategory(index, updatedCategory)}
                />
            ))}
        </div>
    );
}

export default App;
